<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Malzeme Hesaplama Sistemi</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2em;
            margin-bottom: 5px;
        }
        
        .header p {
            font-size: 0.95em;
            opacity: 0.9;
        }
        
        .input-section {
            padding: 20px 30px;
            background: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
        }

        .project-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }

        .project-info .form-group {
            margin-bottom: 0;
        }

        .project-info .form-group label {
            font-size: 0.85em;
            color: #6c757d;
        }

        .project-info .form-group input {
            padding: 8px;
            font-size: 0.95em;
        }
        
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 6px;
            font-size: 0.9em;
        }
        
        .form-group input,
        .form-group select {
            padding: 10px;
            border: 2px solid #dee2e6;
            border-radius: 6px;
            font-size: 0.95em;
            transition: all 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .btn-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 10px 25px;
            border: none;
            border-radius: 6px;
            font-size: 0.95em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        .results-section {
            padding: 20px 30px;
            background: white;
        }
        
        .result-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .result-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        }
        
        .result-card h3 {
            font-size: 0.8em;
            opacity: 0.9;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .result-card .value {
            font-size: 1.6em;
            font-weight: bold;
        }
        
        .result-card .unit {
            font-size: 0.85em;
            opacity: 0.9;
        }
        
        .table-container {
            overflow-x: auto;
            margin-top: 20px;
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .table-actions {
            display: flex;
            gap: 10px;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }
        
        thead {
            background: #f8f9fa;
        }
        
        th {
            padding: 12px;
            text-align: left;
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
            font-size: 0.9em;
        }
        
        td {
            padding: 12px;
            border-bottom: 1px solid #dee2e6;
            font-size: 0.9em;
        }
        
        tbody tr:hover {
            background: #f8f9fa;
        }

        .action-buttons {
            display: flex;
            gap: 5px;
        }
        
        .edit-btn, .delete-btn {
            color: white;
            border: none;
            padding: 4px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.85em;
            transition: all 0.3s ease;
        }

        .edit-btn {
            background: #007bff;
        }

        .edit-btn:hover {
            background: #0056b3;
        }
        
        .delete-btn {
            background: #dc3545;
        }
        
        .delete-btn:hover {
            background: #c82333;
        }

        .edit-input {
            padding: 4px;
            border: 1px solid #667eea;
            border-radius: 3px;
            font-size: 0.9em;
            width: 100%;
        }
        
        .summary-section {
            background: #f8f9fa;
            padding: 15px;
            margin-top: 20px;
            border-radius: 8px;
            border: 2px solid #dee2e6;
            float: right;
            width: auto;
            min-width: 300px;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 10px;
        }
        
        .summary-item {
            background: white;
            padding: 10px;
            border-radius: 6px;
            text-align: center;
            border: 1px solid #dee2e6;
        }
        
        .summary-item h4 {
            color: #495057;
            margin-bottom: 3px;
            font-size: 0.85em;
        }
        
        .summary-item .value {
            font-size: 1.3em;
            font-weight: bold;
            color: #667eea;
        }

        .clearfix {
            clear: both;
        }
        
        @media (max-width: 768px) {
            .header h1 {
                font-size: 1.5em;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .result-cards {
                grid-template-columns: 1fr;
            }
            
            .btn-group {
                flex-direction: column;
            }
            
            .table-header {
                flex-direction: column;
                gap: 10px;
            }
            
            .table-actions {
                width: 100%;
                justify-content: center;
            }

            .summary-section {
                float: none;
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üèóÔ∏è Malzeme Hesaplama Sistemi</h1>
            <p>Profesyonel Aƒüƒ±rlƒ±k Hesaplayƒ±cƒ±</p>
        </div>
        
        <div class="input-section">
            <div class="project-info">
                <div class="form-group">
                    <label for="projeAdi">Proje Adƒ±</label>
                    <input type="text" id="projeAdi" placeholder="Proje adƒ±nƒ± girin">
                </div>
                <div class="form-group">
                    <label for="resimAciklamasi">Resim A√ßƒ±klamasƒ±</label>
                    <input type="text" id="resimAciklamasi" placeholder="Resim a√ßƒ±klamasƒ±">
                </div>
                <div class="form-group">
                    <label for="resimNo">Resim No</label>
                    <input type="text" id="resimNo" placeholder="Resim numarasƒ±">
                </div>
                <div class="form-group">
                    <label for="siparisNo">Sipari≈ü No</label>
                    <input type="text" id="siparisNo" placeholder="Sipari≈ü numarasƒ±">
                </div>
                <div class="form-group">
                    <label for="revizyonNo">Revizyon No</label>
                    <input type="text" id="revizyonNo" placeholder="Revizyon numarasƒ±">
                </div>
            </div>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="malzemeTuru">Malzeme T√ºr√º</label>
                    <select id="malzemeTuru" onchange="MaterialCalculator.malzemeTuruDegisti()">
                        <option value="">Se√ßiniz...</option>
                        <option value="sac">Sac</option>
                        <option value="lama">Lama</option>
                        <option value="boru">Boru</option>
                        <option value="kosebent">L K√∂≈üebent</option>
                        <option value="npu">NPU Profil</option>
                        <option value="heb">HEB Profil</option>
                        <option value="hea">HEA Profil</option>
                        <option value="ipe">IPE Profil</option>
                        <option value="kutu">Kutu Profil</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="malzemeCinsi">Malzeme Cinsi</label>
                    <select id="malzemeCinsi">
                        <option value="S235JR">S235JR</option>
                        <option value="S275JR">S275JR</option>
                        <option value="P235GH">P235GH</option>
                        <option value="P265GH">P265GH</option>
                        <option value="P295GH">P295GH</option>
                        <option value="P355GH">P355GH</option>
                        <option value="P355NH">P355NH</option>
                        <option value="14301">1.4301</option>
                        <option value="14401">1.4401</option>
                        <option value="14404">1.4404</option>
                        <option value="16Mo3">16Mo3</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="adet">Adet</label>
                    <input type="number" id="adet" value="1" min="1">
                </div>

                <div class="form-group">
                    <label for="heatNo">Heat No</label>
                    <input type="text" id="heatNo" placeholder="Heat numarasƒ±">
                </div>
            </div>
            
            <div class="form-grid" id="olcuAlanlari">
                <!-- Dinamik olarak eklenecek -->
            </div>
            
            <div class="btn-group">
                <button class="btn btn-primary" onclick="MaterialCalculator.hesapla()">Hesapla</button>
                <button class="btn btn-secondary" onclick="MaterialCalculator.tabloyaEkle()">Tabloya Ekle</button>
                <button class="btn btn-secondary" onclick="MaterialCalculator.temizle()">Temizle</button>
            </div>
        </div>
        
        <div class="results-section">
            <div class="result-cards">
                <div class="result-card">
                    <h3>Birim Aƒüƒ±rlƒ±k</h3>
                    <div class="value" id="birimAgirlik">0.00</div>
                    <div class="unit">kg</div>
                </div>
                <div class="result-card">
                    <h3>Toplam Aƒüƒ±rlƒ±k</h3>
                    <div class="value" id="toplamAgirlik">0.00</div>
                    <div class="unit">kg</div>
                </div>
                <div class="result-card" id="suHacmiCard" style="display:none;">
                    <h3>Su Hacmi</h3>
                    <div class="value" id="suHacmi">0.00</div>
                    <div class="unit">litre</div>
                </div>
            </div>
            
            <div class="table-container">
                <div class="table-header">
                    <h3>Malzeme Listesi</h3>
                    <div class="table-actions">
                        <button class="btn btn-success" onclick="ExcelManager.exportToExcel()">üìä Excel'e Kaydet</button>
                        <button class="btn btn-primary" onclick="ExcelManager.excelAc()">üìÇ Excel A√ß</button>
                        <button class="btn btn-secondary" onclick="MaterialCalculator.tabloyuTemizle()">üóëÔ∏è Tabloyu Temizle</button>
                        <input type="file" id="excelYukle" accept=".xlsx,.xls" style="display: none;" onchange="ExcelManager.dosyaSecildi(event)">
                    </div>
                </div>
                
                <table id="malzemeTablosu">
                    <thead>
                        <tr>
                            <th>P.No</th>
                            <th>Adet</th>
                            <th>Malzeme T√ºr√º</th>
                            <th>Malzeme Cinsi</th>
                            <th>√ñl√ß√ºler</th>
                            <th>EN Normu</th>
                            <th>Su Hacmi (L)</th>
                            <th>Birim Aƒüƒ±rlƒ±k (kg)</th>
                            <th>Toplam Aƒüƒ±rlƒ±k (kg)</th>
                            <th>Heat No</th>
                            <th>ƒ∞≈ülem</th>
                        </tr>
                    </thead>
                    <tbody id="tabloGovdesi">
                    </tbody>
                </table>
                
                <div class="summary-section" id="ozet" style="display: none;">
                    <h3 style="text-align: center; margin-bottom: 10px;">√ñzet Raporu</h3>
                    <div class="summary-grid">
                        <div class="summary-item">
                            <h4>Toplam Par√ßa Sayƒ±sƒ±</h4>
                            <div class="value" id="toplamParca">0</div>
                        </div>
                        <div class="summary-item">
                            <h4>Toplam Aƒüƒ±rlƒ±k</h4>
                            <div class="value" id="genelToplamAgirlik">0.00 kg</div>
                        </div>
                    </div>
                </div>
                <div class="clearfix"></div>
            </div>
        </div>
    </div>

    <script>
        // EN Norm bilgileri
        const EN_NORMLARI = {
            'S235JR': 'EN 10025-2',
            'S275JR': 'EN 10025-2',
            'P235GH': 'EN 10028-2',
            'P265GH': 'EN 10028-2',
            'P295GH': 'EN 10028-2',
            'P355GH': 'EN 10028-2',
            'P355NH': 'EN 10028-3',
            '14301': 'EN 10088-2',
            '14401': 'EN 10088-2',
            '14404': 'EN 10088-2',
            '16Mo3': 'EN 10028-2'
        };

        // Malzeme yoƒüunluklarƒ± (kg/m¬≥)
        const YOGUNLUKLAR = {
            'S235JR': 7850,
            'S275JR': 7850,
            'P235GH': 7850,
            'P265GH': 7850,
            'P295GH': 7850,
            'P355GH': 7850,
            'P355NH': 7850,
            '14301': 8000,
            '14401': 8000,
            '14404': 8000,
            '16Mo3': 7850
        };

        let pNoSayaci = 1;

        // Ana hesaplama sistemi
        const MaterialCalculator = {
            profilVerileri: {
                ipe: {
                    80: { agirlik: 6.0, kesitAlan: 7.64 },
                    100: { agirlik: 8.1, kesitAlan: 10.3 },
                    120: { agirlik: 10.4, kesitAlan: 13.2 },
                    140: { agirlik: 12.9, kesitAlan: 16.4 },
                    160: { agirlik: 15.8, kesitAlan: 20.1 },
                    180: { agirlik: 18.8, kesitAlan: 23.9 },
                    200: { agirlik: 22.4, kesitAlan: 28.5 },
                    220: { agirlik: 26.2, kesitAlan: 33.4 },
                    240: { agirlik: 30.7, kesitAlan: 39.1 },
                    270: { agirlik: 36.1, kesitAlan: 45.9 },
                    300: { agirlik: 42.2, kesitAlan: 53.8 }
                },
                hea: {
                    100: { agirlik: 16.7, kesitAlan: 21.2 },
                    120: { agirlik: 19.9, kesitAlan: 25.3 },
                    140: { agirlik: 24.7, kesitAlan: 31.4 },
                    160: { agirlik: 30.4, kesitAlan: 38.8 },
                    180: { agirlik: 35.5, kesitAlan: 45.3 },
                    200: { agirlik: 42.3, kesitAlan: 53.8 },
                    220: { agirlik: 50.5, kesitAlan: 64.3 },
                    240: { agirlik: 60.3, kesitAlan: 76.8 },
                    260: { agirlik: 68.2, kesitAlan: 86.8 },
                    280: { agirlik: 76.4, kesitAlan: 97.3 },
                    300: { agirlik: 88.3, kesitAlan: 112.5 }
                },
                heb: {
                    100: { agirlik: 20.4, kesitAlan: 26.0 },
                    120: { agirlik: 26.7, kesitAlan: 34.0 },
                    140: { agirlik: 33.7, kesitAlan: 43.0 },
                    160: { agirlik: 42.6, kesitAlan: 54.3 },
                    180: { agirlik: 51.2, kesitAlan: 65.3 },
                    200: { agirlik: 61.3, kesitAlan: 78.1 },
                    220: { agirlik: 71.5, kesitAlan: 91.0 },
                    240: { agirlik: 83.2, kesitAlan: 106.0 },
                    260: { agirlik: 93.0, kesitAlan: 118.4 },
                    280: { agirlik: 103.5, kesitAlan: 131.4 },
                    300: { agirlik: 117.0, kesitAlan: 149.1 }
                },
                npu: {
                    80: { agirlik: 8.64, kesitAlan: 11.0 },
                    100: { agirlik: 10.6, kesitAlan: 13.5 },
                    120: { agirlik: 13.4, kesitAlan: 17.0 },
                    140: { agirlik: 16.0, kesitAlan: 20.4 },
                    160: { agirlik: 18.8, kesitAlan: 24.0 },
                    180: { agirlik: 22.0, kesitAlan: 28.0 },
                    200: { agirlik: 25.3, kesitAlan: 32.2 }
                }
            },

            malzemeTuruDegisti() {
                const tur = document.getElementById('malzemeTuru').value;
                const olcuAlanlari = document.getElementById('olcuAlanlari');
                const suHacmiCard = document.getElementById('suHacmiCard');
                
                olcuAlanlari.innerHTML = '';
                
                // Su hacmi kartƒ±nƒ± sadece boru se√ßildiƒüinde g√∂ster
                if (tur === 'boru') {
                    suHacmiCard.style.display = 'block';
                } else {
                    suHacmiCard.style.display = 'none';
                    document.getElementById('suHacmi').textContent = '0.00';
                }
                
                const olcuHTML = {
                    sac: `
                        <div class="form-group">
                            <label for="kalinlik">Kalƒ±nlƒ±k (mm)</label>
                            <input type="number" id="kalinlik" step="0.1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="en">En (mm)</label>
                            <input type="number" id="en" step="1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="boy">Boy (mm)</label>
                            <input type="number" id="boy" step="1" min="0">
                        </div>
                    `,
                    lama: `
                        <div class="form-group">
                            <label for="kalinlik">Kalƒ±nlƒ±k (mm)</label>
                            <input type="number" id="kalinlik" step="0.1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="genislik">Geni≈ülik (mm)</label>
                            <input type="number" id="genislik" step="1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="uzunluk">Uzunluk (mm)</label>
                            <input type="number" id="uzunluk" step="1" min="0">
                        </div>
                    `,
                    boru: `
                        <div class="form-group">
                            <label for="disCap">Dƒ±≈ü √áap (mm)</label>
                            <input type="number" id="disCap" step="0.1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="etKalinlik">Et Kalƒ±nlƒ±ƒüƒ± (mm)</label>
                            <input type="number" id="etKalinlik" step="0.1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="uzunluk">Uzunluk (mm)</label>
                            <input type="number" id="uzunluk" step="1" min="0">
                        </div>
                    `,
                    kosebent: `
                        <div class="form-group">
                            <label for="kenar1">1. Kenar (mm)</label>
                            <input type="number" id="kenar1" step="1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="kenar2">2. Kenar (mm)</label>
                            <input type="number" id="kenar2" step="1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="etKalinlik">Et Kalƒ±nlƒ±ƒüƒ± (mm)</label>
                            <input type="number" id="etKalinlik" step="0.1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="uzunluk">Uzunluk (mm)</label>
                            <input type="number" id="uzunluk" step="1" min="0">
                        </div>
                    `,
                    kutu: `
                        <div class="form-group">
                            <label for="genislik">Geni≈ülik (mm)</label>
                            <input type="number" id="genislik" step="1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="yukseklik">Y√ºkseklik (mm)</label>
                            <input type="number" id="yukseklik" step="1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="etKalinlik">Et Kalƒ±nlƒ±ƒüƒ± (mm)</label>
                            <input type="number" id="etKalinlik" step="0.1" min="0">
                        </div>
                        <div class="form-group">
                            <label for="uzunluk">Uzunluk (mm)</label>
                            <input type="number" id="uzunluk" step="1" min="0">
                        </div>
                    `
                };
                
                const profilHTML = `
                    <div class="form-group">
                        <label for="profilBoyutu">Profil Boyutu</label>
                        <select id="profilBoyutu">
                            ${tur === 'ipe' ? 
                                Object.keys(this.profilVerileri.ipe).map(boyut => 
                                    `<option value="${boyut}">IPE ${boyut}</option>`
                                ).join('') : ''
                            }
                            ${tur === 'hea' ? 
                                Object.keys(this.profilVerileri.hea).map(boyut => 
                                    `<option value="${boyut}">HEA ${boyut}</option>`
                                ).join('') : ''
                            }
                            ${tur === 'heb' ? 
                                Object.keys(this.profilVerileri.heb).map(boyut => 
                                    `<option value="${boyut}">HEB ${boyut}</option>`
                                ).join('') : ''
                            }
                            ${tur === 'npu' ? 
                                Object.keys(this.profilVerileri.npu).map(boyut => 
                                    `<option value="${boyut}">NPU ${boyut}</option>`
                                ).join('') : ''
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="uzunluk">Uzunluk (mm)</label>
                        <input type="number" id="uzunluk" step="1" min="0">
                    </div>
                `;
                
                if (['ipe', 'hea', 'heb', 'npu'].includes(tur)) {
                    olcuAlanlari.innerHTML = profilHTML;
                } else if (olcuHTML[tur]) {
                    olcuAlanlari.innerHTML = olcuHTML[tur];
                }
            },

            hesapla() {
                const tur = document.getElementById('malzemeTuru').value;
                const malzemeCinsi = document.getElementById('malzemeCinsi').value;
                const yogunluk = YOGUNLUKLAR[malzemeCinsi];
                const adet = parseFloat(document.getElementById('adet').value) || 1;
                
                if (!tur) {
                    alert('L√ºtfen malzeme t√ºr√º se√ßin!');
                    return;
                }
                
                let birimAgirlik = 0;
                let birimSuHacmi = 0;
                let toplamSuHacmi = 0;
                
                try {
                    switch(tur) {
                        case 'sac':
                            const sacKalinlik = parseFloat(document.getElementById('kalinlik').value) || 0;
                            const sacEn = parseFloat(document.getElementById('en').value) || 0;
                            const sacBoy = parseFloat(document.getElementById('boy').value) || 0;
                            const hacimSac = (sacKalinlik * sacEn * sacBoy) / 1000000000;
                            birimAgirlik = hacimSac * yogunluk;
                            break;
                            
                        case 'lama':
                            const lamaKalinlik = parseFloat(document.getElementById('kalinlik').value) || 0;
                            const lamaGenislik = parseFloat(document.getElementById('genislik').value) || 0;
                            const lamaUzunluk = parseFloat(document.getElementById('uzunluk').value) || 0;
                            const hacimLama = (lamaKalinlik * lamaGenislik * lamaUzunluk) / 1000000000;
                            birimAgirlik = hacimLama * yogunluk;
                            break;
                            
                        case 'boru':
                            const disCap = parseFloat(document.getElementById('disCap').value) || 0;
                            const boruEtKalinlik = parseFloat(document.getElementById('etKalinlik').value) || 0;
                            const boruUzunluk = parseFloat(document.getElementById('uzunluk').value) || 0;
                            const icCap = disCap - (2 * boruEtKalinlik);
                            const disAlan = Math.PI * Math.pow(disCap/2, 2);
                            const icAlan = Math.PI * Math.pow(icCap/2, 2);
                            const kesitAlan = disAlan - icAlan;
                            const hacimBoru = (kesitAlan * boruUzunluk) / 1000000000;
                            birimAgirlik = hacimBoru * yogunluk;
                            // Su hacmi hesaplama (borunun i√ß bo≈üluƒüu)
                            birimSuHacmi = (icAlan * boruUzunluk) / 1000000; // Birim su hacmi litre
                            toplamSuHacmi = birimSuHacmi * adet; // Toplam su hacmi
                            break;
                            
                        case 'kosebent':
                            const kenar1 = parseFloat(document.getElementById('kenar1').value) || 0;
                            const kenar2 = parseFloat(document.getElementById('kenar2').value) || 0;
                            const kosebentEtKalinlik = parseFloat(document.getElementById('etKalinlik').value) || 0;
                            const kosebentUzunluk = parseFloat(document.getElementById('uzunluk').value) || 0;
                            const kosebentAlan = (kenar1 + kenar2 - kosebentEtKalinlik) * kosebentEtKalinlik;
                            const hacimKosebent = (kosebentAlan * kosebentUzunluk) / 1000000000;
                            birimAgirlik = hacimKosebent * yogunluk;
                            break;
                            
                        case 'kutu':
                            const kutuGenislik = parseFloat(document.getElementById('genislik').value) || 0;
                            const kutuYukseklik = parseFloat(document.getElementById('yukseklik').value) || 0;
                            const kutuEtKalinlik = parseFloat(document.getElementById('etKalinlik').value) || 0;
                            const kutuUzunluk = parseFloat(document.getElementById('uzunluk').value) || 0;
                            const disAlanKutu = kutuGenislik * kutuYukseklik;
                            const icAlanKutu = (kutuGenislik - 2*kutuEtKalinlik) * (kutuYukseklik - 2*kutuEtKalinlik);
                            const kutuKesitAlan = disAlanKutu - icAlanKutu;
                            const hacimKutu = (kutuKesitAlan * kutuUzunluk) / 1000000000;
                            birimAgirlik = hacimKutu * yogunluk;
                            break;
                            
                        case 'ipe':
                        case 'hea':
                        case 'heb':
                        case 'npu':
                            const profilBoyutu = document.getElementById('profilBoyutu').value;
                            const profilUzunluk = parseFloat(document.getElementById('uzunluk').value) || 0;
                            const profilVeri = this.profilVerileri[tur][profilBoyutu];
                            birimAgirlik = (profilVeri.agirlik * profilUzunluk) / 1000;
                            break;
                    }
                    
                    document.getElementById('birimAgirlik').textContent = birimAgirlik.toFixed(2);
                    document.getElementById('toplamAgirlik').textContent = (birimAgirlik * adet).toFixed(2);
                    
                    if (tur === 'boru') {
                        document.getElementById('suHacmi').textContent = toplamSuHacmi.toFixed(2);
                    }
                    
                } catch (error) {
                    alert('Hesaplama sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen deƒüerleri kontrol edin.');
                    console.error('Hesaplama hatasƒ±:', error);
                }
            },

            tabloyaEkle() {
                const tur = document.getElementById('malzemeTuru').value;
                if (!tur) {
                    alert('L√ºtfen √∂nce hesaplama yapƒ±n!');
                    return;
                }
                
                const birimAgirlik = parseFloat(document.getElementById('birimAgirlik').textContent);
                if (birimAgirlik === 0) {
                    alert('L√ºtfen √∂nce hesaplama yapƒ±n!');
                    return;
                }
                
                const malzemeCinsi = document.getElementById('malzemeCinsi').value;
                const adet = document.getElementById('adet').value;
                const toplamAgirlik = document.getElementById('toplamAgirlik').textContent;
                const suHacmi = tur === 'boru' ? document.getElementById('suHacmi').textContent : '-';
                const heatNo = document.getElementById('heatNo').value || '-';
                const enNormu = EN_NORMLARI[malzemeCinsi];
                
                let olculer = this.getOlcuText(tur);
                
                const tabloGovdesi = document.getElementById('tabloGovdesi');
                const yeniSatir = tabloGovdesi.insertRow();
                
                // Satƒ±ra veri niteliklerini ekle (d√ºzenleme i√ßin)
                yeniSatir.setAttribute('data-tur', tur);
                yeniSatir.setAttribute('data-malzeme-cinsi', malzemeCinsi);
                
                yeniSatir.innerHTML = `
                    <td>${pNoSayaci}</td>
                    <td>${adet}</td>
                    <td>${tur.toUpperCase()}</td>
                    <td>${malzemeCinsi.includes('14') ? '1.'+malzemeCinsi : malzemeCinsi}</td>
                    <td>${olculer}</td>
                    <td>${enNormu}</td>
                    <td>${suHacmi}</td>
                    <td>${birimAgirlik}</td>
                    <td>${toplamAgirlik}</td>
                    <td>${heatNo}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="edit-btn" onclick="MaterialCalculator.satirDuzenle(this)">D√ºzenle</button>
                            <button class="delete-btn" onclick="MaterialCalculator.satirSil(this)">Sil</button>
                        </div>
                    </td>
                `;
                
                pNoSayaci++;
                this.ozetGuncelle();
            },

            satirDuzenle(btn) {
                const satir = btn.parentNode.parentNode.parentNode;
                const hucreler = satir.getElementsByTagName('td');
                
                if (btn.textContent === 'D√ºzenle') {
                    // D√ºzenleme moduna ge√ß
                    for (let i = 1; i < 10; i++) {
                        if (i === 5) continue; // EN Normu d√ºzenlenemez
                        const deger = hucreler[i].textContent;
                        hucreler[i].innerHTML = `<input type="text" class="edit-input" value="${deger}" 
                            onchange="MaterialCalculator.satirDegisti(this, ${i})">`;
                    }
                    btn.textContent = 'Kaydet';
                } else {
                    // Deƒüi≈üiklikleri kaydet
                    for (let i = 1; i < 10; i++) {
                        if (i === 5) continue; // EN Normu
                        const input = hucreler[i].querySelector('input');
                        if (input) {
                            hucreler[i].textContent = input.value;
                        }
                    }
                    btn.textContent = 'D√ºzenle';
                    this.ozetGuncelle();
                }
            },

            satirDegisti(input, sutunIndex) {
                const satir = input.closest('tr');
                const hucreler = satir.getElementsByTagName('td');
                const tur = satir.getAttribute('data-tur');
                const malzemeCinsi = satir.getAttribute('data-malzeme-cinsi');
                
                // √ñl√ß√ºler veya adet deƒüi≈ütiyse yeniden hesapla
                if (sutunIndex === 1 || sutunIndex === 4) {
                    const adet = parseFloat(hucreler[1].querySelector('input').value) || 1;
                    const olculer = hucreler[4].querySelector('input').value;
                    
                    // √ñl√ß√ºlerden deƒüerleri √ßƒ±kar ve hesapla
                    const birimAgirlik = this.olcudenAgirlikHesapla(tur, olculer, malzemeCinsi);
                    const toplamAgirlik = (birimAgirlik * adet).toFixed(2);
                    
                    // Birim aƒüƒ±rlƒ±k ve toplam aƒüƒ±rlƒ±k inputlarƒ±nƒ± g√ºncelle
                    if (hucreler[7].querySelector('input')) {
                        hucreler[7].querySelector('input').value = birimAgirlik.toFixed(2);
                    }
                    if (hucreler[8].querySelector('input')) {
                        hucreler[8].querySelector('input').value = toplamAgirlik;
                    }
                    
                    // Boru ise su hacmini hesapla (adet ile √ßarp)
                    if (tur === 'boru' && hucreler[6].querySelector('input')) {
                        const birimSuHacmi = this.olcudenSuHacmiHesapla(olculer);
                        const toplamSuHacmi = birimSuHacmi * adet;
                        hucreler[6].querySelector('input').value = toplamSuHacmi.toFixed(2);
                    }
                }
            },

            olcudenAgirlikHesapla(tur, olculer, malzemeCinsi) {
                const yogunluk = YOGUNLUKLAR[malzemeCinsi];
                const degerler = olculer.match(/[\d.]+/g);
                if (!degerler) return 0;
                
                let birimAgirlik = 0;
                
                switch(tur) {
                    case 'sac':
                        if (degerler.length >= 3) {
                            const kalinlik = parseFloat(degerler[0]);
                            const en = parseFloat(degerler[1]);
                            const boy = parseFloat(degerler[2]);
                            const hacim = (kalinlik * en * boy) / 1000000000;
                            birimAgirlik = hacim * yogunluk;
                        }
                        break;
                    case 'lama':
                        if (degerler.length >= 3) {
                            const kalinlik = parseFloat(degerler[0]);
                            const genislik = parseFloat(degerler[1]);
                            const uzunluk = parseFloat(degerler[2]);
                            const hacim = (kalinlik * genislik * uzunluk) / 1000000000;
                            birimAgirlik = hacim * yogunluk;
                        }
                        break;
                    case 'boru':
                        if (degerler.length >= 3) {
                            const disCap = parseFloat(degerler[0]);
                            const etKalinlik = parseFloat(degerler[1]);
                            const uzunluk = parseFloat(degerler[2]);
                            const icCap = disCap - (2 * etKalinlik);
                            const disAlan = Math.PI * Math.pow(disCap/2, 2);
                            const icAlan = Math.PI * Math.pow(icCap/2, 2);
                            const kesitAlan = disAlan - icAlan;
                            const hacim = (kesitAlan * uzunluk) / 1000000000;
                            birimAgirlik = hacim * yogunluk;
                        }
                        break;
                    case 'kosebent':
                        if (degerler.length >= 4) {
                            const kenar1 = parseFloat(degerler[0]);
                            const kenar2 = parseFloat(degerler[1]);
                            const etKalinlik = parseFloat(degerler[2]);
                            const uzunluk = parseFloat(degerler[3]);
                            const alan = (kenar1 + kenar2 - etKalinlik) * etKalinlik;
                            const hacim = (alan * uzunluk) / 1000000000;
                            birimAgirlik = hacim * yogunluk;
                        }
                        break;
                    case 'kutu':
                        if (degerler.length >= 4) {
                            const genislik = parseFloat(degerler[0]);
                            const yukseklik = parseFloat(degerler[1]);
                            const etKalinlik = parseFloat(degerler[2]);
                            const uzunluk = parseFloat(degerler[3]);
                            const disAlan = genislik * yukseklik;
                            const icAlan = (genislik - 2*etKalinlik) * (yukseklik - 2*etKalinlik);
                            const kesitAlan = disAlan - icAlan;
                            const hacim = (kesitAlan * uzunluk) / 1000000000;
                            birimAgirlik = hacim * yogunluk;
                        }
                        break;
                    case 'ipe':
                    case 'hea':
                    case 'heb':
                    case 'npu':
                        if (degerler.length >= 2) {
                            const boyut = degerler[0];
                            const uzunluk = parseFloat(degerler[1]);
                            const profilVeri = this.profilVerileri[tur][boyut];
                            if (profilVeri) {
                                birimAgirlik = (profilVeri.agirlik * uzunluk) / 1000;
                            }
                        }
                        break;
                }
                
                return birimAgirlik;
            },

            olcudenSuHacmiHesapla(olculer) {
                const degerler = olculer.match(/[\d.]+/g);
                if (!degerler || degerler.length < 3) return 0;
                
                const disCap = parseFloat(degerler[0]);
                const etKalinlik = parseFloat(degerler[1]);
                const uzunluk = parseFloat(degerler[2]);
                const icCap = disCap - (2 * etKalinlik);
                const icAlan = Math.PI * Math.pow(icCap/2, 2);
                const suHacmi = (icAlan * uzunluk) / 1000000; // Litre
                
                return suHacmi;
            },

            getOlcuText(tur) {
                switch(tur) {
                    case 'sac':
                        return `${document.getElementById('kalinlik').value}x${document.getElementById('en').value}x${document.getElementById('boy').value}mm`;
                    case 'lama':
                        return `${document.getElementById('kalinlik').value}x${document.getElementById('genislik').value}x${document.getElementById('uzunluk').value}mm`;
                    case 'boru':
                        return `√ò${document.getElementById('disCap').value}x${document.getElementById('etKalinlik').value}x${document.getElementById('uzunluk').value}mm`;
                    case 'kosebent':
                        return `L${document.getElementById('kenar1').value}x${document.getElementById('kenar2').value}x${document.getElementById('etKalinlik').value}x${document.getElementById('uzunluk').value}mm`;
                    case 'kutu':
                        return `${document.getElementById('genislik').value}x${document.getElementById('yukseklik').value}x${document.getElementById('etKalinlik').value}x${document.getElementById('uzunluk').value}mm`;
                    case 'ipe':
                    case 'hea':
                    case 'heb':
                    case 'npu':
                        return `${tur.toUpperCase()} ${document.getElementById('profilBoyutu').value}x${document.getElementById('uzunluk').value}mm`;
                    default:
                        return '';
                }
            },

            satirSil(btn) {
                if (confirm('Bu satƒ±rƒ± silmek istediƒüinizden emin misiniz?')) {
                    btn.parentNode.parentNode.parentNode.remove();
                    this.pNoYenidenSirala();
                    this.ozetGuncelle();
                }
            },

            pNoYenidenSirala() {
                const satirlar = document.querySelectorAll('#tabloGovdesi tr');
                satirlar.forEach((satir, index) => {
                    satir.cells[0].textContent = index + 1;
                });
                pNoSayaci = satirlar.length + 1;
            },

            temizle() {
                document.getElementById('malzemeTuru').value = '';
                document.getElementById('adet').value = '1';
                document.getElementById('heatNo').value = '';
                document.getElementById('olcuAlanlari').innerHTML = '';
                document.getElementById('birimAgirlik').textContent = '0.00';
                document.getElementById('toplamAgirlik').textContent = '0.00';
                document.getElementById('suHacmi').textContent = '0.00';
                document.getElementById('suHacmiCard').style.display = 'none';
            },

            tabloyuTemizle() {
                if (confirm('T√ºm tablo verilerini silmek istediƒüinizden emin misiniz?')) {
                    document.getElementById('tabloGovdesi').innerHTML = '';
                    pNoSayaci = 1;
                    this.ozetGuncelle();
                }
            },

            ozetGuncelle() {
                const satirlar = document.querySelectorAll('#tabloGovdesi tr');
                const ozetDiv = document.getElementById('ozet');
                
                if (satirlar.length === 0) {
                    ozetDiv.style.display = 'none';
                    return;
                }
                
                ozetDiv.style.display = 'block';
                
                let toplamAgirlik = 0;
                let toplamParcaSayisi = 0;
                
                satirlar.forEach(satir => {
                    const adet = parseFloat(satir.cells[1].textContent);
                    const satirAgirlik = parseFloat(satir.cells[8].textContent);
                    
                    toplamParcaSayisi += adet;
                    toplamAgirlik += satirAgirlik;
                });
                
                document.getElementById('toplamParca').textContent = toplamParcaSayisi;
                document.getElementById('genelToplamAgirlik').textContent = toplamAgirlik.toFixed(2) + ' kg';
            }
        };

        // Excel Y√∂netimi Mod√ºl√º - Tam format desteƒüi ile
        const ExcelManager = {
            exportToExcel() {
                const tablo = document.getElementById('malzemeTablosu');
                const satirlar = tablo.querySelectorAll('tbody tr');
                
                if (satirlar.length === 0) {
                    alert('Kaydedilecek veri bulunmamaktadƒ±r!');
                    return;
                }
                
                // Workbook olu≈ütur
                const workbook = XLSX.utils.book_new();
                
                // Worksheet verilerini hazƒ±rla
                const wsData = [];
                
                // ƒ∞lk 6 satƒ±r i√ßin bo≈ü array olu≈ütur
                for (let i = 0; i < 6; i++) {
                    wsData.push(new Array(10).fill(''));
                }
                
                // Firma adresi ve sabit deƒüerler
                wsData[0][0] = '≈ûair Nedim Caddesi\nHacƒ± Halitbey Sokak No:7\nBe≈üikta≈ü - ƒ∞STANBUL\nTel: +90 212 236 25 57\nFax: +90 212 236 25 61\nE-Mail: teta@tetakazan.com.tr';
                wsData[0][5] = 'Proje:';
                wsData[0][6] = document.getElementById('projeAdi').value || '';
                wsData[0][9] = 'Sipari≈ü No:';
                
                wsData[1][9] = document.getElementById('siparisNo').value || '';
                
                wsData[2][5] = 'Resim A√ßƒ±klamasƒ±:';
                wsData[2][6] = document.getElementById('resimAciklamasi').value || '';
                
                wsData[3][9] = 'Revizyon No:';
                
                wsData[4][5] = 'Resim No:';
                wsData[4][6] = document.getElementById('resimNo').value || '';
                wsData[4][9] = document.getElementById('revizyonNo').value || '';
                
                // Tablo ba≈ülƒ±klarƒ± (7. satƒ±r, index 6)
                wsData[6] = [
                    'P.No',
                    'Adet', 
                    'Malzeme \nT√ºr√º',
                    'Malzeme\nCinsi',
                    '√ñl√ß√ºler',
                    'EN Normu',
                    'Su Hacmi \n(L)',
                    'Birim Aƒüƒ±rlƒ±k \n(kg)',
                    'Toplam Aƒüƒ±rlƒ±k \n(kg)',
                    'Heat No'
                ];
                
                // Veri satƒ±rlarƒ± (A8'den ba≈ülayarak)
                let satirIndex = 7;
                satirlar.forEach(satir => {
                    const satirVerisi = [];
                    for (let i = 0; i < 10; i++) {
                        satirVerisi.push(satir.cells[i].textContent);
                    }
                    wsData.push(satirVerisi);
                    satirIndex++;
                });
                
                // Bo≈ü satƒ±rlar ekle (√∂zet i√ßin alan bƒ±rak)
                const bosSatirSayisi = Math.max(50 - satirIndex, 10);
                for (let i = 0; i < bosSatirSayisi; i++) {
                    wsData.push(new Array(10).fill(''));
                }
                
                // √ñzet bilgileri (saƒü alt k√∂≈üe - H58-I64 civarƒ±nda)
                const ozetBaslangic = Math.max(satirIndex + 5, 57);
                wsData[ozetBaslangic] = new Array(10).fill('');
                wsData[ozetBaslangic][7] = '√ñZET RAPORU';
                wsData[ozetBaslangic][8] = '';
                
                wsData[ozetBaslangic + 1] = new Array(10).fill('');
                wsData[ozetBaslangic + 1][7] = 'Toplam Par√ßa Sayƒ±sƒ±:';
                wsData[ozetBaslangic + 1][8] = document.getElementById('toplamParca').textContent;
                
                wsData[ozetBaslangic + 2] = new Array(10).fill('');
                wsData[ozetBaslangic + 2][7] = 'Toplam Aƒüƒ±rlƒ±k:';
                wsData[ozetBaslangic + 2][8] = document.getElementById('genelToplamAgirlik').textContent;
                
                // Worksheet olu≈ütur
                const worksheet = XLSX.utils.aoa_to_sheet(wsData);
                
                // H√ºcre birle≈ütirmeleri
                worksheet['!merges'] = [
                    // Logo alanƒ±
                    { s: { r: 0, c: 0 }, e: { r: 5, c: 2 } },  // A1-C6
                    { s: { r: 0, c: 3 }, e: { r: 5, c: 4 } },  // D1-E6
                    // Proje bilgileri
                    { s: { r: 0, c: 5 }, e: { r: 1, c: 5 } },  // F1-F2
                    { s: { r: 0, c: 6 }, e: { r: 1, c: 8 } },  // G1-I2
                    // Resim a√ßƒ±klamasƒ±
                    { s: { r: 2, c: 5 }, e: { r: 3, c: 5 } },  // F3-F4
                    { s: { r: 2, c: 6 }, e: { r: 3, c: 8 } },  // G3-I4
                    // Resim no
                    { s: { r: 4, c: 5 }, e: { r: 5, c: 5 } },  // F5-F6
                    { s: { r: 4, c: 6 }, e: { r: 5, c: 8 } },  // G5-I6
                    // Sipari≈ü no ve Revizyon no
                    { s: { r: 1, c: 9 }, e: { r: 2, c: 9 } },  // J2-J3
                    { s: { r: 4, c: 9 }, e: { r: 5, c: 9 } },  // J5-J6
                    // √ñzet ba≈ülƒ±k
                    { s: { r: ozetBaslangic, c: 7 }, e: { r: ozetBaslangic, c: 8 } }
                ];
                
                // S√ºtun geni≈ülikleri (tam olarak √∂rneƒüe uygun)
                worksheet['!cols'] = [
                    { wch: 5, wpx: 40 },    // A - P.No
                    { wch: 6.43, wpx: 50 }, // B - Adet
                    { wch: 22.29, wpx: 161 }, // C - Malzeme T√ºr√º
                    { wch: 12.14, wpx: 90 }, // D - Malzeme Cinsi
                    { wch: 20, wpx: 145 },   // E - √ñl√ß√ºler
                    { wch: 14.29, wpx: 105 }, // F - EN Normu
                    { wch: 8.57, wpx: 65 },  // G - Su Hacmi
                    { wch: 11.43, wpx: 85 }, // H - Birim Aƒüƒ±rlƒ±k
                    { wch: 12.86, wpx: 95 }, // I - Toplam Aƒüƒ±rlƒ±k
                    { wch: 14.86, wpx: 109 } // J - Heat No
                ];
                
                // Satƒ±r y√ºkseklikleri
                worksheet['!rows'] = [];
                for (let i = 0; i < 6; i++) {
                    worksheet['!rows'][i] = { hpt: 20 };
                }
                worksheet['!rows'][6] = { hpt: 30 }; // Ba≈ülƒ±k satƒ±rƒ± daha y√ºksek
                
                // H√ºcre stilleri
                const range = XLSX.utils.decode_range(worksheet['!ref']);
                for (let R = 0; R <= range.e.r; ++R) {
                    for (let C = 0; C <= range.e.c; ++C) {
                        const cellAddress = XLSX.utils.encode_cell({ r: R, c: C });
                        if (!worksheet[cellAddress]) worksheet[cellAddress] = { t: 's', v: '' };
                        
                        // Kenarlƒ±klar
                        if (R <= ozetBaslangic + 3) {
                            worksheet[cellAddress].s = {
                                border: {
                                    top: { style: 'thin', color: { rgb: '000000' } },
                                    bottom: { style: 'thin', color: { rgb: '000000' } },
                                    left: { style: 'thin', color: { rgb: '000000' } },
                                    right: { style: 'thin', color: { rgb: '000000' } }
                                },
                                alignment: {
                                    horizontal: 'center',
                                    vertical: 'center',
                                    wrapText: true
                                }
                            };
                            
                            // Ba≈ülƒ±k satƒ±rƒ± formatƒ±
                            if (R === 6) {
                                worksheet[cellAddress].s.font = {
                                    bold: true,
                                    sz: 10
                                };
                                worksheet[cellAddress].s.fill = {
                                    fgColor: { rgb: 'D3D3D3' }
                                };
                            }
                            
                            // Sabit yazƒ±lar i√ßin kalƒ±n font
                            if ((C === 5 && R <= 5) || (C === 9 && (R === 0 || R === 3))) {
                                worksheet[cellAddress].s.font = {
                                    bold: true,
                                    sz: 10
                                };
                            }
                            
                            // √ñzet raporu ba≈ülƒ±ƒüƒ±
                            if (R === ozetBaslangic && C >= 7) {
                                worksheet[cellAddress].s.font = {
                                    bold: true,
                                    sz: 11
                                };
                                worksheet[cellAddress].s.fill = {
                                    fgColor: { rgb: 'E0E0E0' }
                                };
                            }
                        }
                    }
                }
                
                // A1 h√ºcresini sol √ºst hizalƒ± yap (adres i√ßin)
                if (worksheet['A1']) {
                    worksheet['A1'].s.alignment = {
                        horizontal: 'left',
                        vertical: 'top',
                        wrapText: true
                    };
                }
                
                // Worksheet'i workbook'a ekle
                XLSX.utils.book_append_sheet(workbook, worksheet, 'MALZEME Lƒ∞STESƒ∞');
                
                // Dosya adƒ± olu≈ütur (sipari≈ü_no_resim_no_tarih formatƒ±nda)
                const siparisNo = document.getElementById('siparisNo').value || 'SIP';
                const resimNo = document.getElementById('resimNo').value || 'RES';
                const now = new Date();
                const tarih = `${now.getDate().toString().padStart(2,'0')}.${(now.getMonth()+1).toString().padStart(2,'0')}.${now.getFullYear()}`;
                const dosyaAdi = `${siparisNo}_${resimNo}_${tarih}.xlsx`;
                
                // Excel dosyasƒ±nƒ± kaydet
                XLSX.writeFile(workbook, dosyaAdi);
                
                alert('Excel dosyasƒ± ba≈üarƒ±yla olu≈üturuldu!');
            },

            excelAc() {
                document.getElementById('excelYukle').click();
            },

            dosyaSecildi(event) {
                const file = event.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, { type: 'array' });
                        
                        const firstSheetName = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[firstSheetName];
                        
                        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                        
                        this.excelVerisiniYukle(jsonData);
                    } catch (error) {
                        alert('Excel dosyasƒ± okuma hatasƒ±!');
                        console.error('Excel y√ºkleme hatasƒ±:', error);
                    }
                };
                reader.readAsArrayBuffer(file);
                
                event.target.value = '';
            },

            excelVerisiniYukle(jsonData) {
                if (!jsonData || jsonData.length < 7) {
                    alert('Excel dosyasƒ±nda ge√ßerli veri bulunamadƒ±!');
                    return;
                }

                try {
                    // Proje bilgilerini y√ºkle
                    if (jsonData[0] && jsonData[0][6]) document.getElementById('projeAdi').value = jsonData[0][6] || '';
                    if (jsonData[1] && jsonData[1][9]) document.getElementById('siparisNo').value = jsonData[1][9] || '';
                    if (jsonData[2] && jsonData[2][6]) document.getElementById('resimAciklamasi').value = jsonData[2][6] || '';
                    if (jsonData[4] && jsonData[4][6]) document.getElementById('resimNo').value = jsonData[4][6] || '';
                    if (jsonData[4] && jsonData[4][9]) document.getElementById('revizyonNo').value = jsonData[4][9] || '';
                    
                    // Mevcut tabloyu temizle
                    document.getElementById('tabloGovdesi').innerHTML = '';
                    pNoSayaci = 1;
                    
                    // Veri satƒ±rlarƒ±nƒ± y√ºkle (8. satƒ±rdan ba≈üla, index 7)
                    for (let i = 7; i < jsonData.length; i++) {
                        const satir = jsonData[i];
                        
                        // Bo≈ü satƒ±rlarƒ± veya ge√ßersiz verileri atla
                        if (!satir || !satir[0] || satir[0] === '') {
                            continue;
                        }
                        
                        if (satir.length >= 10) {
                            const tabloGovdesi = document.getElementById('tabloGovdesi');
                            const yeniSatir = tabloGovdesi.insertRow();
                            
                            // Malzeme t√ºr√ºn√º belirle
                            const malzemeTuru = satir[2].toString().toLowerCase();
                            yeniSatir.setAttribute('data-tur', malzemeTuru);
                            yeniSatir.setAttribute('data-malzeme-cinsi', satir[3]);
                            
                            yeniSatir.innerHTML = `
                                <td>${satir[0]}</td>
                                <td>${satir[1]}</td>
                                <td>${satir[2]}</td>
                                <td>${satir[3]}</td>
                                <td>${satir[4]}</td>
                                <td>${satir[5]}</td>
                                <td>${satir[6]}</td>
                                <td>${satir[7]}</td>
                                <td>${satir[8]}</td>
                                <td>${satir[9]}</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="edit-btn" onclick="MaterialCalculator.satirDuzenle(this)">D√ºzenle</button>
                                        <button class="delete-btn" onclick="MaterialCalculator.satirSil(this)">Sil</button>
                                    </div>
                                </td>
                            `;
                            
                            pNoSayaci++;
                        }
                    }
                    
                    MaterialCalculator.ozetGuncelle();
                    alert('Excel dosyasƒ± ba≈üarƒ±yla y√ºklendi!');
                    
                } catch (error) {
                    alert('Excel verisi i≈ülenirken hata olu≈ütu.');
                    console.error('Excel verisi i≈üleme hatasƒ±:', error);
                }
            }
        };
    </script>
</body>
</html>